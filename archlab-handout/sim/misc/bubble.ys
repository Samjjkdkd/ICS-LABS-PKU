# Bubble
# 谢昱辉2200017753
    .pos 0
    irmovq stack, %rsp      
    call main       
    halt            

# sample array
    .align 8
Array:
    .quad 0xbca
    .quad 0xcba
    .quad 0xacb
    .quad 0xcab
    .quad 0xabc
    .quad 0xbac

main:
    irmovq Array,%rdi
    irmovq $6,%rsi
    call bubble_sort
    ret

# data in %rdi, count in %rsi
bubble_sort:
    pushq %r8
    pushq %r9
    pushq %r10
    pushq %r11
    pushq %r12
    pushq %r13
    pushq %r14
    irmovq $8,%r8      # Constant 8
    rrmovq %rdi,%r9    # last in %r9
    addq %rsi,%rsi
    addq %rsi,%rsi
    addq %rsi,%rsi
    subq %r8,%rsi
    addq %rsi,%r9    # last = data + count - 1
L1:
    rrmovq %r9,%r10  
    subq %rdi,%r10  # last - data
    jle L2
    rrmovq %rdi,%r11   # i in %r11
L3:
    rrmovq %r9,%r12
    subq %r11,%r12   # last - i
    jle L4
    mrmovq (%r11),%r12    # *i
    mrmovq 8(%r11),%r13    # *(i+1)
    rrmovq %r12,%r14
    subq %r13,%r14   # *i - *(i + 1)
    jle L5
    rrmovq %r13,%r14
    rmmovq %r12,8(%r11)
    rmmovq %r14,(%r11)
L5:
    addq %r8,%r11   # i++
    jmp L3
L4:
    subq %r8,%r9   # last--
    jmp L1
L2:
    popq %r14
    popq %r13
    popq %r12
    popq %r11
    popq %r10
    popq %r9
    popq %r8
    ret

# Stack starts here and grows to lower addresses
    .pos 0x200
stack:
